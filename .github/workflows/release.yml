name: Release Build

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: 3.8  # 修复拼写错误
  GO_VERSION: 1.19
  ICON_DIR: .github/workflows/assets/

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            py_icon: 杰瑞.ico
            go_icon: 汤姆.ico
            python_executable: python-filecrypt-gui-win-x64.exe
            go_executable: go-filecrypt-cli-win-x64.exe
          - os: macos-latest
            py_icon: 杰瑞.png
            go_icon: ""
            python_executable: python-filecrypt-gui-macos-x64
            go_executable: go-filecrypt-cli-macos-x64
          - os: ubuntu-latest
            py_icon: 杰瑞.png
            go_icon: ""
            python_executable: python-filecrypt-gui-linux-x64
            go_executable: go-filecrypt-cli-linux-x64

    steps:
    - uses: actions/checkout@v3

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv/
        key: ${{ runner.os }}-pip-${{ hashFiles('python/requirements.txt') }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements.txt pyinstaller

    - name: Build Python GUI
      run: |
        cd python
        pyinstaller --onefile --noconsole \
          --icon=${{ github.workspace }}/${{ env.ICON_DIR }}${{ matrix.py_icon }} \
          main.py --name ${{ matrix.python_executable%.* }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true  # 启用 Go 模块缓存

    - name: Build Go CLI
      run: |
        cd golang
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          go install github.com/akavel/rsrc@latest
          rsrc -ico ${{ github.workspace }}/${{ env.ICON_DIR }}${{ matrix.go_icon }} -o resource.syso
        fi
        go build -o ${{ matrix.go_executable }}
        # 清理中间文件（仅 Windows）
        if [ "${{ matrix.os }}" = "windows-latest" ]; then rm -f resource.syso; fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-binaries
        path: |
          python/dist/${{ matrix.python_executable }}
          golang/${{ matrix.go_executable }}
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 确保有创建发布的权限
      
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -type f -name '*' | while read file; do
          os_dir=$(basename $(dirname "$file"))
          filename=$(basename "$file")
          extension="${filename##*.}"
          new_name="${filename%.*}-${os_dir%%-*}.${extension}"
          cp "$file" "release/$new_name"
        done

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: release/*
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true